Getting Started
---------------

Asyncio
^^^^^^^
Before trying this library you should understand the basics of python asyncio. You can
read up on python 3 async basics `here <https://snarky.ca/how-the-heck-does-async-await-work-in-python-3-5/>`_.


Creating the socket and server object
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Before we can do anything you need to create the websocket object, we also create the eventloop.
::

   loop = asyncio.get_event_loop()
   socket = WebSocketServer(address, port, loop=loop)


Registering the on_connection callback
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We can listen for new websocket connections with the :meth:`~websocket.server.WebSocketServer.connection`
`decorator <https://realpython.com/blog/python/primer-on-python-decorators/>`_.
::

    @socket.connection
    async def on_connection(client: Client):
        print("We just got a new connection!")

The parameter to the callback is the :class:`~websocket.client.Client` class, more about that class later.

Starting the server
^^^^^^^^^^^^^^^^^^^
Before the server will accept connections we have to start it. Starting the server is as simple as using the
socket object as a `context manager <http://book.pythontips.com/en/latest/context_managers.html>`_. The server
object yielded by the context manager is a :class:`~asyncio.Server` class.
::

    with socket as server:
        print(f'Serving on {server.sockets[0].getsockname()}')

    print("The server closed")

The server closes as soon as the with block is done. In order to keep the server alive we need to give up control to the event loop.
We can do this with the :meth:`~asyncio.AbstractEventLoop.run_forever` method.
::

    with socket as server:
        loop.run_forever()
        print("The server is going to close!")

    print("The server closed")

The client object
^^^^^^^^^^^^^^^^^

Registering the on_message callback
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Reading from the stream
^^^^^^^^^^^^^^^^^^^^^^^

Sending messages to the client
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Data frame
**********

Fragments
*********

Other callbacks
^^^^^^^^^^^^^^^